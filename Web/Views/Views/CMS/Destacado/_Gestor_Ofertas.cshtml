@using Es.Riam.Gnoss.Web.MVC.Models
@using Es.Riam.Gnoss.Web.MVC.Controles.Helper
@using Es.Riam.Gnoss.Web.MVC.Models.ViewModels
@using Es.Riam.Gnoss.Web.MVC.Models.Administracion
@using Es.Riam.Gnoss.AD.ServiciosGenerales
@using Es.Riam.Gnoss.Web.MVC.Controllers
@using Es.Riam.Gnoss.Web.MVC.Controllers.Administracion
@using Es.Riam.Gnoss.Web.Controles
@model CMSComponentHot
@{
    CommunityModel Comunidad = Html.GetComunidad();
    UserIdentityModel IdentidadActual = Html.GetIdentidadActual();
    Guid currentId = Guid.Empty;
    string currentIdstr = string.Empty;

    
    if (IdentidadActual != null)
    {
        currentId = IdentidadActual.KeyUser;
        if (currentId != Guid.Empty)
        {
            currentIdstr = currentId.ToString().ToUpper();
        }
    }

}

@if (Model != null)
{

    <div class="col col-12 col-breadcrumb">
        <ul>
            <li>
                <a href="@Comunidad.Url">Home</a>
            </li>
            <li>
                @Model.Title
            </li>
        </ul>
    </div>

    @if (!IdentidadActual.IsGuestUser)
    {

        <div class="col col-12">
            <div class="wrapCol mt-4">
                <div class="row edicionRecurso edicionOfertaTecnologica" id="ofertaListOtri" data-title="@Html.Translate("GESTOR_OFERTAS_TECNOLOGICAS")">

                </div>
            </div>
        </div>



        <!-- JAVASCRIPT -->
        <script type="text/javascript">

            // Selectores seleccionados
            var currentsSelected = []

            // Carga las ofertas
            comportamientoOfertasOtri.init("@currentIdstr", "ofertaListOtri")


            var currentId = ""

            // Datos gráfica áreas temáticas
            function borrarOferta() {
                var url = url_servicio_externo + "Ofertas/BorrarOferta"
                var arg = {};
                arg.pIdOfferId = currentId
                $.get(url, arg, function (data) {
                    window.location = "@Comunidad.Url/@Html.Translate("OFERTA_URL")"
                });
            }

            /** 
            * Datos gráfica áreas temáticas
            * param id, Array con el estado a cambiar
            * param estado, string con el estado al que cambiar
            * param estadoActual, string con el estado actual al que actualizar
            */

            function cambiarEstado(id, estado, estadoActual) {
                var url = url_servicio_externo + "Ofertas/CambiarEstado"
                var arg = {};
                arg.pIdOfferId = id
                arg.estado = estado
                arg.estadoActual = estadoActual
                arg.pIdGnossUser = "@IdentidadActual.KeyUser"
                $.post(url, arg, function (data) {
                    location.reload()
                });
            }

            function gOTecnEndLoadedResources() {
                let currentsIds = []

                if(true)
                {       
                    $("#ofertaListOtri article.resource h2.resource-title").attr("tagert","_blank")
                    // stepsOffer.data.pPersons = $('#ofertaListOtri article.resource').toArray().map(e => {return $(e).attr('id')})
                    
                    $("#ofertaListOtri article.resource").each((i, e) => {

                        currentsIds.push(e.id.split('_')[1])

                        if ($(e).find(".custom-checkbox-resource .material-icons").length == 0) {

                            
                            $(e).prepend(`<div class="custom-control custom-checkbox-resource add">
                                <span class="material-icons">add</span>
                            </div>`)
                        }
                    })

                    checkboxResources.init()

                    currentsIds.forEach(idDocument => {

                        $("#resource_" + idDocument).on("DOMSubtreeModified", function(e) {

                            let selector = $(this).find(".custom-checkbox-resource")

                            if ($(selector).text().trim() == "done")
                            {
                                let element = $(this)
                                currentsSelected.push(idDocument)

                            } else
                            {
                                // Borrar oferta del array de seleciconados
                                currentsSelected = currentsSelected.filter(item => item != idDocument)
                            }
                        }); 

                    })
                }
            }

        </script>
    }


}


@functions
{
    public static List<Offer> listaOfertas = new List<Offer>();

    public class Offer
    {
        public string id { get; set; }
        public string fecha { get; set; }
        public string description { get; set; }
        public string title { get; set; }
        public string descriptor { get; set; }
        public string author { get; set; }
        public string estadoDisp { get; set; }
        public string matureState { get; set; }
        public string framingSector { get; set; }
        public string availability { get; set; }
        public string colorEstado { get; set; }
        public string actUser { get; set; }
        public string members { get; set; }
        public string isOtriManager { get; set; }
        public string isIp { get; set; }
        public string otherResearcher { get; set; }

        public Offer()
        {
            id = "";
            fecha = "";
            description = "";
            title = "";
            author = "";
            estadoDisp = "";
            colorEstado = "";
            availability = "";
            framingSector = "";
            matureState = "";
            actUser = "";
            members = "";
            isOtriManager = "";
            isIp = "";
            otherResearcher = "";
        }

        public Offer(System.Data.DataRow fila)
        {

            try
            {
                this.id = fila["oferta"].ToString();
                this.fecha = GetFecha(fila["fecha"].ToString());
                this.title = fila["title"].ToString();
                this.description = fila["description"].ToString();
                this.author = fila["author"].ToString();
                this.estadoDisp = fila["estadoDisp"].ToString();
                this.colorEstado = fila["colorEstado"].ToString();
                this.availability = fila["availability"].ToString();
                this.framingSector = fila["framingSector"].ToString();
                this.matureState = fila["matureState"].ToString();
                this.actUser = fila["actUser"].ToString();
                this.members = fila["members"].ToString();

            } catch (Exception e ) {}

            try
            {
                if (!fila.IsNull("isOtriManager"))
                {
                    this.isOtriManager = fila["isOtriManager"].ToString();
                }
                if (!fila.IsNull("isIp"))
                {
                    this.isIp = fila["isIp"].ToString();
                }
                if (!fila.IsNull("otherResearcher"))
                {
                    this.otherResearcher = fila["otherResearcher"].ToString();
                }

            } catch (Exception e ) {}


        }

        public void Editar(System.Data.DataRow fila)
        {


            try
            {
                if (!fila.IsNull("isOtriManager"))
                {
                    this.isOtriManager = fila["isOtriManager"].ToString() != "" ? fila["isOtriManager"].ToString() : this.isOtriManager;
                }
                if (!fila.IsNull("isIp"))
                {
                    this.isIp = fila["isIp"].ToString() != "" ? fila["isIp"].ToString() : this.isIp;
                }
                if (!fila.IsNull("otherResearcher"))
                {
                    this.isIp = fila["otherResearcher"].ToString() != "" ? fila["otherResearcher"].ToString() : this.isIp;
                }

            } catch (Exception e ) {}


        }


        private string GetFecha(string fecha)
        {
            if (!string.IsNullOrEmpty(fecha) && fecha.Length == 14)
            {
                string anio = fecha.Substring(0, 4);
                string mes = fecha.Substring(4, 2);
                string dia = fecha.Substring(6, 2);
                string hora = fecha.Substring(8, 2);
                string min = fecha.Substring(10, 2);
                string segs = fecha.Substring(12, 2);
                fecha = dia + "/" + mes + "/" + anio + " " + hora + ":" + min + ":" + segs;
            }
            return fecha;
        }

    }

    enum TipoUser
    {
        ip,
        isOtriManager,
        actUser,
        otro
    }


    enum Estado
    {
        Borrador,
        Revision,
        Validada,
        Denegada,
        Archivada,
    }

    private bool mostrar (string estadoStr, TipoUser tipoUser)
    {
        var estado = getEstado(estadoStr);

        switch (tipoUser) {
            case TipoUser.ip:
                switch (estado)
                {
                    case Estado.Archivada:
                        return false;
                        break;
                    default:
                        return true;
                        break;
                }
                break;

            case TipoUser.isOtriManager:

                switch (estado)
                {
                    case Estado.Borrador:
                        return false;
                        break;
                    case Estado.Archivada:
                        return false;
                        break;
                    default:
                        return true;
                        break;
                }
                break;

            case TipoUser.actUser:
                switch (estado)
                {
                    case Estado.Archivada:
                        return false;
                        break;
                    default:
                        return true;
                        break;
                }
                break;

            default:
                switch (estado)
                {
                    case Estado.Archivada:
                        return false;
                        break;
                    default:
                        return true;
                        break;
                }
                break;
        }
    }

    private Estado getEstado (string estado)
    {
        switch (estado)
        {
            case "http://gnoss.com/items/offerstate_001":
                return Estado.Borrador;
                break;
            
            case "http://gnoss.com/items/offerstate_002":
                return Estado.Revision;
                break;

                
            case "http://gnoss.com/items/offerstate_003":
                return Estado.Validada;
                break;

                
            case "http://gnoss.com/items/offerstate_004":
                return Estado.Denegada;
                break;

                
            case "http://gnoss.com/items/offerstate_005":
                return Estado.Archivada;
                break;

            default:
                return Estado.Borrador;
                break;
        }
    }
}
