@using Es.Riam.Gnoss.Web.MVC.Models
@using Es.Riam.Gnoss.Web.MVC.Controles.Helper
@using Es.Riam.Gnoss.Web.MVC.Models.ViewModels
@using Es.Riam.Gnoss.Web.MVC.Models.Administracion
@using Es.Riam.Gnoss.AD.ServiciosGenerales
@using Es.Riam.Gnoss.Web.MVC.Controllers
@using Es.Riam.Gnoss.Web.MVC.Controllers.Administracion
@using Es.Riam.Gnoss.Web.Controles
@model CMSComponentHot
@{
    CommunityModel Comunidad = Html.GetComunidad();
    UserIdentityModel IdentidadActual = Html.GetIdentidadActual();
    Guid currentId = Guid.Empty;
    string currentIdstr = string.Empty;

    
    if (IdentidadActual != null)
    {
        currentId = IdentidadActual.KeyUser;
        if (currentId != Guid.Empty)
        {
            currentIdstr = currentId.ToString().ToUpper();
        }
    }

}

@if (Model != null)
{

    <div class="col col-12 col-breadcrumb">
        <ul>
            <li>
                <a href="@Comunidad.Url">Home</a>
            </li>
            <li>
                @Model.Title
            </li>
        </ul>
    </div>

    @if (!IdentidadActual.IsGuestUser)
    {

        <div class="col col-12">
            <div class="wrapCol mt-4">
                <div class="row edicionRecurso edicionOfertaTecnologica" id="ofertaListOtri" data-title="@Html.Translate("GESTOR_OFERTAS_TECNOLOGICAS")">

                </div>
            </div>
        </div>



        <div id="modal-eliminar-oferta-confirmacion" class="modal modal-top fade modal-edicion" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <p class="modal-title"><span class="material-icons">delete</span>@Html.Translate("BORRAR_OFERTA")</p>
                        <span class="material-icons cerrar" data-dismiss="modal" aria-label="Close">close</span>
                    </div>
                    <div class="modal-body">
                        <div class="formulario-edicion">
                            <div class="custom-form-row">
                                <div class="form-group full-group">
                                    <label class="control-label d-block">@Html.Translate("CONFIRMACION_BORRAR_OFERTA")</label>
                                    <div class="form-actions">
                                        <a href="javascript: cambiarEstado.borrarOferta()" class="btn btn-primary uppercase">@Html.Translate("BORRAR")</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>



        <div id="modal-enviar-comentario" class="modal modal-top fade modal-edicion" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <p class="modal-title"><span class="material-icons">send</span>@Html.Translate("COMENTARIO")</p>
                        <span class="material-icons cerrar" data-dismiss="modal" aria-label="Close">close</span>
                    </div>
                    <div class="modal-body">
                        <div class="formulario-edicion">
                            <div class="custom-form-row">
                                <div class="form-group full-group">
                                    <label class="control-label d-block">@Html.Translate("INTRODUCE_UN_COMENTARIO")</label>
                                    <textarea class="w-100" id="areaTextoComentario"> </textarea>
                                    <div class="form-actions">
                                        <a href="javascript: cambiarEstado.sendModal(document.getElementById('areaTextoComentario').value)" class="btn btn-primary uppercase">@Html.Translate("ENVIAR")</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>




        <!-- JAVASCRIPT -->
        <script type="text/javascript">

            // Selectores seleccionados
            var currentsSelected = []
            var currentsIds = []

            // Carga las ofertas
            comportamientoOfertasOtri.init("@currentIdstr", "ofertaListOtri")


            var currentId = ""

            // Datos gráfica áreas temáticas
            function borrarOferta() {
                var url = url_servicio_externo + "Ofertas/BorrarOferta"
                var arg = {};
                arg.pIdOfferId = currentId
                $.get(url, arg, function (data) {
                    window.location = "@Comunidad.Url/@Html.Translate("OFERTA_URL")"
                });
            }

            /** 
            * Objeto que actualiza el estado de las ofertas
            * param id, Array con el estado a cambiar
            * param estado, string con el estado al que cambiar
            * param estadoActual, string con el estado actual al que actualizar
            */
            cambiarEstado = {
                config(id, estado, estadoActual) {
                    this.url = url_servicio_externo + "Ofertas/CambiarEstado"
                    this.arg = {
                        pIdOfferId: id,
                        estado: estado,
                        estadoActual: estadoActual,
                        pIdGnossUser: "@IdentidadActual.KeyUser",
                    };
                },
                borrarOferta() {
                    this.url = url_servicio_externo + "Ofertas/BorrarOferta"
                    $.get(url, arg, function (data) {
                        window.location = "@Comunidad.Url/@Html.Translate("OFERTA_URL")"
                    });
                },
                sendPost() {
                    $.post(this.url, this.arg, function (data) {
                        location.reload()
                    });
                },
                sendModal(texto) {
                    this.arg.texto = texto
                    this.modal.modal('hide')
                    this.sendPost()
                },
                send(id, estado, estadoActual) {
                    this.config(id, estado, estadoActual)
                    this.sendPost()
                },
                setModal(id, estado, estadoActual, idModal) {
                    this.config(id, estado, estadoActual)
                    this.modal = $("#"+idModal)
                    this.modal.modal('show')
                }
            }

            function gOTecnEndLoadedResources() {

                if(true)
                {       
                    $("#ofertaListOtri article.resource h2.resource-title").attr("tagert","_blank")
                    // stepsOffer.data.pPersons = $('#ofertaListOtri article.resource').toArray().map(e => {return $(e).attr('id')})
                    
                    $("#ofertaListOtri article.resource").each((i, e) => {

                        currentsIds.push(e.id.split('_')[1])

                        let materialIcon = e.querySelector(".custom-checkbox-resource .material-icons")
                        if (materialIcon == null) {

                            if (e.dataset.estadores == "http://gnoss.com/items/offerstate_002") {
                                e.innerHTML = `<div class="custom-control custom-checkbox-resource add">
                                    <span class="material-icons">add</span>
                                </div>` + e.innerHTML

                                @* $(e).prepend(`<div class="custom-control custom-checkbox-resource add">
                                    <span class="material-icons">add</span>
                                </div>`) *@
                            }
                        }
                    })



                    // Pintar menus
                    if (document.querySelector("#ofertaListOtri .header-contenido .acciones-listado") == null) {

                        // Genero el elemento del dom para los menús
                        let menus = document.createElement('div')
                        menus.classList.add('acciones-listado')
                        menus.innerHTML += `<div class="wrap">
                            <div class="descargar dropdown">
                                <a class="dropdown-toggle" data-toggle="dropdown">
                                    <span class="material-icons">check</span>
                                    <span class="texto">@Html.Translate("SELECCIONAR")</span>
                                </a>
                                <div class="dropdown-menu basic-dropdown dropdown-menu-right">
                                    <a href="javascript: seleccionarTodos()" class="item-dropdown">@Html.Translate("SELECCIONAR_TODOS")</a>
                                    <a href="javascript: deseleccionarTodos()" class="item-dropdown">@Html.Translate("DESELECCIONAR_TODOS")</a>
                                </div>
                            </div>
                            <div class="ordenar dropdown dropdown-select">
                                <a class="dropdown-toggle" data-toggle="dropdown">
                                    <span class="material-icons">send</span>
                                    <span class="texto">@Html.Translate("ENVIAR_A")</span>
                                </a>
                                <div class="dropdown-menu basic-dropdown dropdown-menu-right">
                                    <a class="item-dropdown" href="javascript:cambiarEstado.sendAll('all','http://gnoss.com/items/offerstate_001', 'http://gnoss.com/items/offerstate_002')">
                                        <span class="material-icons">send</span>
                                        <span class="texto">@Html.Translate("REVISION")</span>
                                    </a>
                                    <a class="item-dropdown" href="javascript:cambiarEstado.sendAll('all','http://gnoss.com/items/offerstate_003', 'http://gnoss.com/items/offerstate_002')">
                                        <span class="material-icons">send</span>
                                        <span class="texto">@Html.Translate("VALIDAR")</span>
                                    </a>
                                    <a class="item-dropdown" href="javascript:cambiarEstado.sendAll('all','http://gnoss.com/items/offerstate_004', 'http://gnoss.com/items/offerstate_002')">
                                        <span class="material-icons">send</span>
                                        <span class="texto">@Html.Translate("DENEGAR")</span>
                                    </a>
                                </div>
                            </div>
                        </div>`

                        // Añado los elementos después del elemento deseado
                        insertAfter(menus ,document.querySelector("#ofertaListOtri .header-contenido .h1-container"))
                    }
                    



                    // Init the checkboxes
                    checkboxResources.init()

                    // Añade o quita los elementos seleccionados
                    currentsIds.forEach(idDocument => {

                        $("#resource_" + idDocument).on("DOMSubtreeModified", function(e) {

                            let selector = $(this).find(".custom-checkbox-resource")

                            if ($(selector).text().trim() == "done")
                            {
                                let element = $(this)
                                if (!currentsSelected.includes(idDocument)) {
                                    currentsSelected.push(idDocument)
                                }

                            } else
                            {
                                // Borrar oferta del array de seleciconados
                                currentsSelected = currentsSelected.filter(item => item != idDocument)
                            }
                        }); 

                    })
                }

                loadActions()
            }

            function loadActions() {


                currentsIds.forEach(idDocument => {

                    // Obtiene el recurso en el dom
                    let item = document.getElementById("resource_" + idDocument)
                    // Obtiene el estado del recurso
                    let itemState = item.dataset.estadores
                    // Obtiene el listado de opciones en el menu
                    let selector = item.querySelector(".acciones-recurso-listado .dropdown-menu ul")


                    let htmlRes = "";
                    let estados = [];
                    let idEstadoOFerta = "";
                    let txtEnviar = "";

                    estados = setActions(itemState, "otri")

                    
                    htmlRes = estados.map(e => {

                        if (e.targetModalId) {
                            return `
                                <li>
                                    <a class="item-dropdown" href="javascript: void(0)">
                                        <span class="material-icons">${e.icono}</span>
                                        <span class="texto" onclick="javascript:cambiarEstado.setModal('${idDocument}','${e.idEstadoOFerta}', '${itemState}', '${e.targetModalId}')" >${e.txtEnviar}</span>
                                    </a>
                                </li>`
                        } else {

                            return `
                                <li>
                                    <a class="item-dropdown" href="javascript:cambiarEstado.send('${idDocument}','${e.idEstadoOFerta}', '${itemState}')">
                                        <span class="material-icons">${e.icono}</span>
                                        <span class="texto">${e.txtEnviar}</span>
                                    </a>
                                </li>`
                        }

                    })

                    selector.innerHTML = htmlRes.join("")
                        
                })

            }

            function seleccionarTodos() {


                // Añade o quita los elementos seleccionados
                currentsIds.forEach(idDocument => {

                    let item = document.getElementById("resource_" + idDocument)

                    let selector = item.getElementsByClassName("custom-checkbox-resource")
                    if (selector && selector.length > 0) {
                        selector[0].classList.remove('add')
                        selector[0].classList.add('done')
                        item.classList.add('seleccionado')
                        selector[0].getElementsByClassName("material-icons")[0].innerText = "done"
                    }

                })
            }

            function deseleccionarTodos() {


                // Añade o quita los elementos seleccionados
                currentsIds.forEach(idDocument => {

                    let item = document.getElementById("resource_" + idDocument)

                    let selector = item.getElementsByClassName("custom-checkbox-resource")
                    if (selector && selector.length > 0) {
                        selector[0].classList.add('add')
                        selector[0].classList.remove('done')
                        item.classList.remove('seleccionado')
                        selector[0].getElementsByClassName("material-icons")[0].innerText = "add"
                    }

                })
            }

            function insertAfter(newNode, existingNode) {
                existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);
            }


            function setActions(estado, typeUser = "other") {

                /**
                * typeUser es el usuario actual, puede contener:
                * own, es el propio usuario
                * otri, es el investigador otri
                * ip, es el investigador principal
                * other, es otro usuario que no coincide con ninguno de los anteriores
                */

                let estados = [];
                let idEstadoOFerta = "";
                let txtEnviar = "";
                let icono = "send";
                let targetModalId = "";

                switch (estado) 
                {
                    case "http://gnoss.com/items/offerstate_001":
                        // Es el creador de la oferta
                        // Puede pasar la oferta a revisión
                        if (typeUser == "own") 
                        {
                            idEstadoOFerta = "http://gnoss.com/items/offerstate_002"
                            txtEnviar = "@Html.Translate("ENVIAR_REVISION")"
                            targetModalId = ""
                            estados.push({ idEstadoOFerta, txtEnviar, icono })

                        }
                        break;
                    case "http://gnoss.com/items/offerstate_002":
                        // Es el creador de la oferta
                        // Puede pasar la oferta a borrador
                        if (typeUser == "own" || typeUser == "otri") 
                        {
                            idEstadoOFerta = "http://gnoss.com/items/offerstate_001"
                            txtEnviar = "@Html.Translate("ENVIAR_BORRADOR")"
                            targetModalId = ""
                            estados.push({ idEstadoOFerta, txtEnviar, icono })

                        }
                        // Es el gestor otri
                        // Puede pasar la oferta a borrador
                        if (typeUser == "otri")
                        {
                            idEstadoOFerta = "http://gnoss.com/items/offerstate_002";
                            txtEnviar = "@Html.Translate("MEJORAR")"
                            targetModalId = "modal-enviar-comentario"
                            estados.push({ idEstadoOFerta, txtEnviar, icono, targetModalId })

                            idEstadoOFerta = "http://gnoss.com/items/offerstate_003";
                            txtEnviar = "@Html.Translate("VALIDAR")"
                            targetModalId = ""
                            estados.push({ idEstadoOFerta, txtEnviar, icono })

                            idEstadoOFerta = "http://gnoss.com/items/offerstate_004";
                            txtEnviar = "@Html.Translate("DENEGAR")"
                            targetModalId = "modal-enviar-comentario"
                            estados.push({ idEstadoOFerta, txtEnviar, icono, targetModalId })

                        }
                        break;
                    case "http://gnoss.com/items/offerstate_003":
                        if (typeUser == "otri")
                        {
                            idEstadoOFerta = "http://gnoss.com/items/offerstate_005";
                            txtEnviar = "@Html.Translate("ARCHIVAR")"
                            targetModalId = "modal-enviar-comentario"
                            estados.push({ idEstadoOFerta, txtEnviar, icono, targetModalId })

                            targetModalId = ""
                            idEstadoOFerta = "http://gnoss.com/items/offerstate_001";
                            txtEnviar = "@Html.Translate("ENVIAR_BORRADOR")"
                            estados.push({ idEstadoOFerta, txtEnviar, icono })
                        }
                        break;
                    case "http://gnoss.com/items/offerstate_004":
                        if (typeUser == "own") 
                        {
                            idEstadoOFerta = "http://gnoss.com/items/offerstate_001";
                            txtEnviar = "@Html.Translate("ENVIAR_BORRADOR")"
                            targetModalId = ""
                            estados.push({ idEstadoOFerta, txtEnviar, icono })

                        }
                        if (typeUser == "otri")
                        {
                            idEstadoOFerta = "http://gnoss.com/items/offerstate_005";
                            txtEnviar = "@Html.Translate("ARCHIVAR")"
                            targetModalId = ""
                            icono = "delete"
                            estados.push({ idEstadoOFerta, txtEnviar, icono })
                        }
                        break;

                }

                if ((typeUser == "own" || typeUser == "otri" || typeuser == "ip") && (idEstadoOFerta == "http://gnoss.com/items/offerstate_001" || idEstadoOFerta == "http://gnoss.com/items/offerstate_002"))
                {
                    idEstadoOFerta = "http://gnoss.com/items/offerstate_005";
                    txtEnviar = "@Html.Translate("BORRAR")"
                    icono = "delete"
                    targetModalId = "modal-eliminar-oferta-confirmacion"
                    estados.push({ idEstadoOFerta, txtEnviar, icono, targetModalId })
                } 

                return estados


            }

        </script>
    }


}